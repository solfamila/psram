# CI/CD Pipeline for MIMXRT700 XSPI PSRAM Example
# Automated build and test workflow for Augment remote agent compatibility

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release
        - flash_debug
        - flash_release

env:
  ARMGCC_VERSION: "10.3-2021.10"
  UNITY_VERSION: "v2.5.2"

jobs:
  # SDK validation job (runs first to catch SDK issues early)
  sdk-validation:
    name: SDK Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Validate NXP MIMXRT700 SDK
      run: |
        echo "=== NXP MIMXRT700 SDK Validation ==="
        SDK_ROOT="${{ github.workspace }}/mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/__repo__"

        # Check if SDK directory exists
        if [ ! -d "$SDK_ROOT" ]; then
          echo "‚ùå ERROR: SDK directory not found at $SDK_ROOT"
          echo "This indicates the repository may be incomplete or corrupted."
          exit 1
        fi
        echo "‚úÖ SDK directory found at: $SDK_ROOT"

        # Check essential SDK components
        echo "Checking essential SDK components..."
        MISSING_COMPONENTS=()
        for dir in CMSIS devices boards components middleware; do
          if [ ! -d "$SDK_ROOT/$dir" ]; then
            MISSING_COMPONENTS+=("$dir")
            echo "‚ùå Missing: $dir"
          else
            echo "‚úÖ Found: $dir"
          fi
        done

        if [ ${#MISSING_COMPONENTS[@]} -ne 0 ]; then
          echo "‚ùå ERROR: Missing SDK components: ${MISSING_COMPONENTS[*]}"
          exit 1
        fi

        # Check SDK version and manifest
        MANIFEST_FILE="$SDK_ROOT/MIMXRT700-EVK_manifest_v3_15.xml"
        if [ -f "$MANIFEST_FILE" ]; then
          SDK_VERSION=$(grep -o 'version="[^"]*"' "$MANIFEST_FILE" | head -n1 | cut -d'"' -f2)
          echo "‚úÖ NXP SDK version: $SDK_VERSION"

          # Validate minimum version (25.03.00)
          if [ "$SDK_VERSION" \< "25.03.00" ]; then
            echo "‚ö†Ô∏è  WARNING: SDK version $SDK_VERSION may be incompatible. Recommended: 25.03.00+"
          fi
        else
          echo "‚ö†Ô∏è  WARNING: SDK manifest file not found at $MANIFEST_FILE"
        fi

        # Check license
        if [ -f "$SDK_ROOT/COPYING-BSD-3" ]; then
          echo "‚úÖ SDK license: BSD-3-Clause (redistribution allowed)"
        fi

        # Display SDK size and structure
        echo "SDK structure summary:"
        du -sh "$SDK_ROOT" 2>/dev/null || echo "Could not determine SDK size"
        ls -la "$SDK_ROOT" | head -10

        echo "üéâ SDK validation completed successfully!"

  # Build job for different configurations
  build:
    name: Build (${{ matrix.build_type }})
    runs-on: ubuntu-latest
    needs: sdk-validation
    
    strategy:
      matrix:
        build_type: [debug, release, flash_debug, flash_release]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Cache ARM GCC toolchain
      id: cache-toolchain
      uses: actions/cache@v4
      with:
        path: /opt/gcc-arm-none-eabi
        key: arm-gcc-${{ env.ARMGCC_VERSION }}
    
    - name: Install ARM GCC toolchain
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu-rm/${{ env.ARMGCC_VERSION }}/gcc-arm-none-eabi-${{ env.ARMGCC_VERSION }}-x86_64-linux.tar.bz2
        sudo tar -xjf gcc-arm-none-eabi-${{ env.ARMGCC_VERSION }}-x86_64-linux.tar.bz2 -C /opt/
        sudo ln -s /opt/gcc-arm-none-eabi-${{ env.ARMGCC_VERSION }} /opt/gcc-arm-none-eabi
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
    
    - name: Set up environment
      run: |
        echo "/opt/gcc-arm-none-eabi/bin" >> $GITHUB_PATH
        echo "ARMGCC_DIR=/opt/gcc-arm-none-eabi" >> $GITHUB_ENV
        echo "SDK_ROOT=${{ github.workspace }}/mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/__repo__" >> $GITHUB_ENV

    - name: Validate SDK installation
      run: |
        echo "=== SDK Validation ==="
        if [ ! -d "$SDK_ROOT" ]; then
          echo "ERROR: SDK directory not found at $SDK_ROOT"
          exit 1
        fi

        # Check essential SDK components
        for dir in CMSIS devices boards components; do
          if [ ! -d "$SDK_ROOT/$dir" ]; then
            echo "ERROR: Required SDK directory missing: $SDK_ROOT/$dir"
            exit 1
          else
            echo "‚úì Found SDK component: $dir"
          fi
        done

        # Check SDK version
        if [ -f "$SDK_ROOT/MIMXRT700-EVK_manifest_v3_15.xml" ]; then
          SDK_VERSION=$(grep -o 'version="[^"]*"' "$SDK_ROOT/MIMXRT700-EVK_manifest_v3_15.xml" | head -n1 | cut -d'"' -f2)
          echo "‚úì NXP SDK version: $SDK_VERSION"
        else
          echo "WARNING: SDK manifest not found"
        fi

        echo "‚úÖ SDK validation completed successfully"
    
    - name: Verify toolchain
      run: |
        arm-none-eabi-gcc --version
        cmake --version
        ninja --version
    
    - name: Build project
      run: |
        ./build.sh -t ${{ matrix.build_type }} -v
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.build_type }}
        path: |
          mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/armgcc/${{ matrix.build_type }}/*.elf
          mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/armgcc/${{ matrix.build_type }}/*.bin
          mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/armgcc/${{ matrix.build_type }}/*.map
        retention-days: 30

  # Test job
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache Unity framework
      id: cache-unity
      uses: actions/cache@v4
      with:
        path: /opt/unity
        key: unity-${{ env.UNITY_VERSION }}
    
    - name: Install Unity testing framework
      if: steps.cache-unity.outputs.cache-hit != 'true'
      run: |
        git clone --branch ${{ env.UNITY_VERSION }} https://github.com/ThrowTheSwitch/Unity.git /tmp/unity
        sudo mv /tmp/unity /opt/unity
    
    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build build-essential
    
    - name: Set up test environment
      run: |
        echo "UNITY_ROOT=/opt/unity" >> $GITHUB_ENV
    
    - name: Build and run tests
      run: |
        cd tests
        mkdir -p build
        cd build
        cmake ..
        make
        ./run_tests
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          tests/build/test_results.txt
        retention-days: 30

  # Container build job (simulates remote agent)
  container-build:
    name: Container Build (Remote Agent Simulation)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build container image
      run: |
        docker build -f .augment/Dockerfile -t mimxrt700-dev .

    - name: Test container build
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace mimxrt700-dev \
          /workspace/build.sh -t debug -v

    - name: Upload container build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: container-build-artifacts
        path: |
          mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/armgcc/debug/*.elf
          mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/armgcc/debug/*.bin
        retention-days: 30

  # Code quality and analysis
  quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format

    - name: Run static analysis
      run: |
        cppcheck --enable=all --error-exitcode=1 \
          mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/*.c \
          mimxrt700evk_xspi_psram_polling_transfer_cm33_core0/*.h || true

    - name: Check code formatting
      run: |
        find mimxrt700evk_xspi_psram_polling_transfer_cm33_core0 -name "*.c" -o -name "*.h" | \
          xargs clang-format --dry-run --Werror || true

  # Documentation check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        # Check if required documentation exists
        test -f README.md
        test -f BUILD.md
        test -f SETUP.md
        test -f .augment/config.yaml
        echo "All required documentation files present"

    - name: Validate configuration files
      run: |
        # Basic YAML validation
        python3 -c "import yaml; yaml.safe_load(open('.augment/config.yaml'))"
        echo "Configuration files are valid"
