/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

// clang-format off
#pragma once

#include <tuple>

#include <executorch/runtime/core/exec_aten/exec_aten.h> // at::Tensor etc.
#include <executorch/runtime/kernel/kernel_runtime_context.h>

// @generated by torchgen/gen_executorch.py from NativeFunctions.h

namespace torch {
namespace executor {
namespace native {
torch::executor::Tensor & _cdist_forward_out(const torch::executor::Tensor & x1, const torch::executor::Tensor & x2, double p, torch::executor::optional<int64_t> compute_mode, torch::executor::Tensor & out);
torch::executor::Tensor & _cdist_forward_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & x1, const torch::executor::Tensor & x2, double p, torch::executor::optional<int64_t> compute_mode, torch::executor::Tensor & out);
torch::executor::Tensor & log_softmax_out(const torch::executor::Tensor & self, int64_t dim, bool half_to_float, torch::executor::Tensor & out);
torch::executor::Tensor & log_softmax_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, bool half_to_float, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> _native_batch_norm_legit_out(const torch::executor::Tensor & input, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, torch::executor::Tensor & running_mean, torch::executor::Tensor & running_var, bool training, double momentum, double eps, torch::executor::Tensor & out, torch::executor::Tensor & save_mean, torch::executor::Tensor & save_invstd);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> _native_batch_norm_legit_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, torch::executor::Tensor & running_mean, torch::executor::Tensor & running_var, bool training, double momentum, double eps, torch::executor::Tensor & out, torch::executor::Tensor & save_mean, torch::executor::Tensor & save_invstd);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> _native_batch_norm_legit_no_stats_out(const torch::executor::Tensor & input, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, bool training, double momentum, double eps, torch::executor::Tensor & out, torch::executor::Tensor & save_mean, torch::executor::Tensor & save_invstd);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> _native_batch_norm_legit_no_stats_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, bool training, double momentum, double eps, torch::executor::Tensor & out, torch::executor::Tensor & save_mean, torch::executor::Tensor & save_invstd);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> _native_batch_norm_legit_no_training_out(const torch::executor::Tensor & input, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, const torch::executor::Tensor & running_mean, const torch::executor::Tensor & running_var, double momentum, double eps, torch::executor::Tensor & out0, torch::executor::Tensor & out1, torch::executor::Tensor & out2);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> _native_batch_norm_legit_no_training_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, const torch::executor::Tensor & running_mean, const torch::executor::Tensor & running_var, double momentum, double eps, torch::executor::Tensor & out0, torch::executor::Tensor & out1, torch::executor::Tensor & out2);
torch::executor::Tensor & _pdist_forward_out(const torch::executor::Tensor & self, double p, torch::executor::Tensor & out);
torch::executor::Tensor & _pdist_forward_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, double p, torch::executor::Tensor & out);
torch::executor::Tensor & softmax_out(const torch::executor::Tensor & self, int64_t dim, bool half_to_float, torch::executor::Tensor & out);
torch::executor::Tensor & softmax_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, bool half_to_float, torch::executor::Tensor & out);
torch::executor::Tensor & to_copy_out(const torch::executor::Tensor & self, bool non_blocking, torch::executor::optional<torch::executor::MemoryFormat> memory_format, torch::executor::Tensor & out);
torch::executor::Tensor & to_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, bool non_blocking, torch::executor::optional<torch::executor::MemoryFormat> memory_format, torch::executor::Tensor & out);
torch::executor::Tensor & abs_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & abs_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & acos_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & acos_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & acosh_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & acosh_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & add_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & add_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & add_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & add_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & addmm_out(const torch::executor::Tensor & self, const torch::executor::Tensor & mat1, const torch::executor::Tensor & mat2, const torch::executor::Scalar & beta, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & addmm_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & mat1, const torch::executor::Tensor & mat2, const torch::executor::Scalar & beta, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & alias_copy_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & alias_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & amax_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & amax_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & amin_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & amin_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & any_all_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & any_all_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & any_dims_out(const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & any_dims_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & any_out(const torch::executor::Tensor & self, int64_t dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & any_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & arange_out(const torch::executor::Scalar & end, torch::executor::Tensor & out);
torch::executor::Tensor & arange_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Scalar & end, torch::executor::Tensor & out);
torch::executor::Tensor & arange_start_out(const torch::executor::Scalar & start, const torch::executor::Scalar & end, const torch::executor::Scalar & step, torch::executor::Tensor & out);
torch::executor::Tensor & arange_start_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Scalar & start, const torch::executor::Scalar & end, const torch::executor::Scalar & step, torch::executor::Tensor & out);
torch::executor::Tensor & argmax_out(const torch::executor::Tensor & self, torch::executor::optional<int64_t> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & argmax_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<int64_t> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & argmin_out(const torch::executor::Tensor & self, torch::executor::optional<int64_t> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & argmin_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<int64_t> dim, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & as_strided_copy_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> size, torch::executor::ArrayRef<int64_t> stride, torch::executor::optional<int64_t> storage_offset, torch::executor::Tensor & out);
torch::executor::Tensor & as_strided_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> size, torch::executor::ArrayRef<int64_t> stride, torch::executor::optional<int64_t> storage_offset, torch::executor::Tensor & out);
torch::executor::Tensor & asin_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & asin_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & asinh_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & asinh_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & atan_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & atan_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & atan2_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & atan2_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & atanh_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & atanh_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & avg_pool2d_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> kernel_size, torch::executor::ArrayRef<int64_t> stride, torch::executor::ArrayRef<int64_t> padding, bool ceil_mode, bool count_include_pad, torch::executor::optional<int64_t> divisor_override, torch::executor::Tensor & out);
torch::executor::Tensor & avg_pool2d_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> kernel_size, torch::executor::ArrayRef<int64_t> stride, torch::executor::ArrayRef<int64_t> padding, bool ceil_mode, bool count_include_pad, torch::executor::optional<int64_t> divisor_override, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_and_Scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_and_Scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_and_Tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_and_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_not_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_not_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_or_Scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_or_Scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_or_Tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_or_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_xor_Scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_xor_Scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_xor_Tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & bitwise_xor_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & bmm_out(const torch::executor::Tensor & self, const torch::executor::Tensor & mat2, torch::executor::Tensor & out);
torch::executor::Tensor & bmm_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & mat2, torch::executor::Tensor & out);
torch::executor::Tensor & cat_out(torch::executor::TensorList tensors, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & cat_out(torch::executor::KernelRuntimeContext & context, torch::executor::TensorList tensors, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & ceil_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & ceil_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & clamp_out(const torch::executor::Tensor & self, const torch::executor::optional<torch::executor::Scalar> & min, const torch::executor::optional<torch::executor::Scalar> & max, torch::executor::Tensor & out);
torch::executor::Tensor & clamp_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::optional<torch::executor::Scalar> & min, const torch::executor::optional<torch::executor::Scalar> & max, torch::executor::Tensor & out);
torch::executor::Tensor & clamp_tensor_out(const torch::executor::Tensor & self, const torch::executor::optional<torch::executor::Tensor> & min, const torch::executor::optional<torch::executor::Tensor> & max, torch::executor::Tensor & out);
torch::executor::Tensor & clamp_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::optional<torch::executor::Tensor> & min, const torch::executor::optional<torch::executor::Tensor> & max, torch::executor::Tensor & out);
torch::executor::Tensor & clone_out(const torch::executor::Tensor & self, torch::executor::optional<torch::executor::MemoryFormat> memory_format, torch::executor::Tensor & out);
torch::executor::Tensor & clone_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<torch::executor::MemoryFormat> memory_format, torch::executor::Tensor & out);
torch::executor::Tensor & constant_pad_nd_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> pad, const torch::executor::Scalar & value, torch::executor::Tensor & out);
torch::executor::Tensor & constant_pad_nd_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> pad, const torch::executor::Scalar & value, torch::executor::Tensor & out);
torch::executor::Tensor & convolution_out(const torch::executor::Tensor & input, const torch::executor::Tensor & weight, const torch::executor::optional<torch::executor::Tensor> & bias, torch::executor::ArrayRef<int64_t> stride, torch::executor::ArrayRef<int64_t> padding, torch::executor::ArrayRef<int64_t> dilation, bool transposed, torch::executor::ArrayRef<int64_t> output_padding, int64_t groups, torch::executor::Tensor & out);
torch::executor::Tensor & convolution_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & weight, const torch::executor::optional<torch::executor::Tensor> & bias, torch::executor::ArrayRef<int64_t> stride, torch::executor::ArrayRef<int64_t> padding, torch::executor::ArrayRef<int64_t> dilation, bool transposed, torch::executor::ArrayRef<int64_t> output_padding, int64_t groups, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> convolution_backward_out(const torch::executor::Tensor & grad_output, const torch::executor::Tensor & input, const torch::executor::Tensor & weight, torch::executor::optional<torch::executor::ArrayRef<int64_t>> bias_sizes, torch::executor::ArrayRef<int64_t> stride, torch::executor::ArrayRef<int64_t> padding, torch::executor::ArrayRef<int64_t> dilation, bool transposed, torch::executor::ArrayRef<int64_t> output_padding, int64_t groups, torch::executor::ArrayRef<bool> output_mask, torch::executor::Tensor & out0, torch::executor::Tensor & out1, torch::executor::Tensor & out2);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> convolution_backward_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & grad_output, const torch::executor::Tensor & input, const torch::executor::Tensor & weight, torch::executor::optional<torch::executor::ArrayRef<int64_t>> bias_sizes, torch::executor::ArrayRef<int64_t> stride, torch::executor::ArrayRef<int64_t> padding, torch::executor::ArrayRef<int64_t> dilation, bool transposed, torch::executor::ArrayRef<int64_t> output_padding, int64_t groups, torch::executor::ArrayRef<bool> output_mask, torch::executor::Tensor & out0, torch::executor::Tensor & out1, torch::executor::Tensor & out2);
torch::executor::Tensor & copy_out(const torch::executor::Tensor & self, const torch::executor::Tensor & src, bool non_blocking, torch::executor::Tensor & out);
torch::executor::Tensor & copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & src, bool non_blocking, torch::executor::Tensor & out);
torch::executor::Tensor & copy_(torch::executor::Tensor & self, const torch::executor::Tensor & src, bool non_blocking);
torch::executor::Tensor & copy_(torch::executor::KernelRuntimeContext & context, torch::executor::Tensor & self, const torch::executor::Tensor & src, bool non_blocking);
torch::executor::Tensor & cos_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & cos_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & cosh_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & cosh_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & cumsum_out(const torch::executor::Tensor & self, int64_t dim, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & cumsum_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & detach_copy_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & detach_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & diagonal_copy_out(const torch::executor::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2, torch::executor::Tensor & out);
torch::executor::Tensor & diagonal_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2, torch::executor::Tensor & out);
torch::executor::Tensor & div_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & div_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & div_scalar_mode_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::optional<torch::executor::string_view> rounding_mode, torch::executor::Tensor & out);
torch::executor::Tensor & div_scalar_mode_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::optional<torch::executor::string_view> rounding_mode, torch::executor::Tensor & out);
torch::executor::Tensor & div_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & div_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & div_out_mode(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::optional<torch::executor::string_view> rounding_mode, torch::executor::Tensor & out);
torch::executor::Tensor & div_out_mode(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::optional<torch::executor::string_view> rounding_mode, torch::executor::Tensor & out);
torch::executor::Tensor & embedding_out(const torch::executor::Tensor & weight, const torch::executor::Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse, torch::executor::Tensor & out);
torch::executor::Tensor & embedding_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & weight, const torch::executor::Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse, torch::executor::Tensor & out);
torch::executor::Tensor & empty_out(torch::executor::ArrayRef<int64_t> size, torch::executor::optional<torch::executor::MemoryFormat> memory_format, torch::executor::Tensor & out);
torch::executor::Tensor & empty_out(torch::executor::KernelRuntimeContext & context, torch::executor::ArrayRef<int64_t> size, torch::executor::optional<torch::executor::MemoryFormat> memory_format, torch::executor::Tensor & out);
torch::executor::Tensor & eq_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & eq_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & eq_tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & eq_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & erf_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & erf_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & exp_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & exp_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & expand_copy_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> size, bool implicit, torch::executor::Tensor & out);
torch::executor::Tensor & expand_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> size, bool implicit, torch::executor::Tensor & out);
torch::executor::Tensor & expm1_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & expm1_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & fill_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & value, torch::executor::Tensor & out);
torch::executor::Tensor & fill_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & value, torch::executor::Tensor & out);
torch::executor::Tensor & fill_tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & value, torch::executor::Tensor & out);
torch::executor::Tensor & fill_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & value, torch::executor::Tensor & out);
torch::executor::Tensor & flip_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dims, torch::executor::Tensor & out);
torch::executor::Tensor & flip_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dims, torch::executor::Tensor & out);
torch::executor::Tensor & floor_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & floor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & floor_divide_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & floor_divide_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & fmod_Tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & fmod_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & fmod_Scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & fmod_Scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & full_out(torch::executor::ArrayRef<int64_t> size, const torch::executor::Scalar & fill_value, torch::executor::Tensor & out);
torch::executor::Tensor & full_out(torch::executor::KernelRuntimeContext & context, torch::executor::ArrayRef<int64_t> size, const torch::executor::Scalar & fill_value, torch::executor::Tensor & out);
torch::executor::Tensor & full_like_out(const torch::executor::Tensor & self, const torch::executor::Scalar & fill_value, torch::executor::optional<torch::executor::MemoryFormat> memory_format, torch::executor::Tensor & out);
torch::executor::Tensor & full_like_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & fill_value, torch::executor::optional<torch::executor::MemoryFormat> memory_format, torch::executor::Tensor & out);
torch::executor::Tensor & gather_out(const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, bool sparse_grad, torch::executor::Tensor & out);
torch::executor::Tensor & gather_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, bool sparse_grad, torch::executor::Tensor & out);
torch::executor::Tensor & ge_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & ge_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & ge_tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & ge_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & gelu_out(const torch::executor::Tensor & self, torch::executor::string_view approximate, torch::executor::Tensor & out);
torch::executor::Tensor & gelu_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::string_view approximate, torch::executor::Tensor & out);
torch::executor::Tensor & glu_out(const torch::executor::Tensor & self, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & glu_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & gt_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & gt_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & gt_tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & gt_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & hardtanh_out(const torch::executor::Tensor & self, const torch::executor::Scalar & min_val, const torch::executor::Scalar & max_val, torch::executor::Tensor & out);
torch::executor::Tensor & hardtanh_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & min_val, const torch::executor::Scalar & max_val, torch::executor::Tensor & out);
torch::executor::Tensor & index_Tensor_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<torch::executor::optional<torch::executor::Tensor>> indices, torch::executor::Tensor & out);
torch::executor::Tensor & index_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<torch::executor::optional<torch::executor::Tensor>> indices, torch::executor::Tensor & out);
torch::executor::Tensor & index_put_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<torch::executor::optional<torch::executor::Tensor>> indices, const torch::executor::Tensor & values, bool accumulate, torch::executor::Tensor & out);
torch::executor::Tensor & index_put_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<torch::executor::optional<torch::executor::Tensor>> indices, const torch::executor::Tensor & values, bool accumulate, torch::executor::Tensor & out);
torch::executor::Tensor & index_select_out(const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, torch::executor::Tensor & out);
torch::executor::Tensor & index_select_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, torch::executor::Tensor & out);
torch::executor::Tensor & isinf_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & isinf_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & isnan_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & isnan_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & le_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & le_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & le_tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & le_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & leaky_relu_out(const torch::executor::Tensor & self, const torch::executor::Scalar & negative_slope, torch::executor::Tensor & out);
torch::executor::Tensor & leaky_relu_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & negative_slope, torch::executor::Tensor & out);
torch::executor::Tensor & lift_fresh_copy_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & lift_fresh_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & log_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & log_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & log10_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & log10_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & log1p_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & log1p_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & log2_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & log2_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & logical_and_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & logical_and_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & logical_not_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & logical_not_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & logical_or_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & logical_or_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & logical_xor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & logical_xor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & logit_out(const torch::executor::Tensor & self, torch::executor::optional<double> eps, torch::executor::Tensor & out);
torch::executor::Tensor & logit_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<double> eps, torch::executor::Tensor & out);
torch::executor::Tensor & lt_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & lt_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & lt_tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & lt_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & masked_fill_scalar_out(const torch::executor::Tensor & self, const torch::executor::Tensor & mask, const torch::executor::Scalar & value, torch::executor::Tensor & out);
torch::executor::Tensor & masked_fill_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & mask, const torch::executor::Scalar & value, torch::executor::Tensor & out);
torch::executor::Tensor & masked_scatter_out(const torch::executor::Tensor & self, const torch::executor::Tensor & mask, const torch::executor::Tensor & source, torch::executor::Tensor & out);
torch::executor::Tensor & masked_scatter_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & mask, const torch::executor::Tensor & source, torch::executor::Tensor & out);
torch::executor::Tensor & masked_select_out(const torch::executor::Tensor & self, const torch::executor::Tensor & mask, torch::executor::Tensor & out);
torch::executor::Tensor & masked_select_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & mask, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> max_out(const torch::executor::Tensor & self, int64_t dim, bool keepdim, torch::executor::Tensor & max, torch::executor::Tensor & max_values);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> max_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, bool keepdim, torch::executor::Tensor & max, torch::executor::Tensor & max_values);
torch::executor::Tensor & max_unary_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & max_unary_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & maximum_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & maximum_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> max_pool2d_with_indices_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> kernel_size, torch::executor::ArrayRef<int64_t> stride, torch::executor::ArrayRef<int64_t> padding, torch::executor::ArrayRef<int64_t> dilation, bool ceil_mode, torch::executor::Tensor & out, torch::executor::Tensor & indices);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> max_pool2d_with_indices_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> kernel_size, torch::executor::ArrayRef<int64_t> stride, torch::executor::ArrayRef<int64_t> padding, torch::executor::ArrayRef<int64_t> dilation, bool ceil_mode, torch::executor::Tensor & out, torch::executor::Tensor & indices);
torch::executor::Tensor & mean_dim_out(const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, bool keepdim, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & mean_dim_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, bool keepdim, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> min_out(const torch::executor::Tensor & self, int64_t dim, bool keepdim, torch::executor::Tensor & min, torch::executor::Tensor & min_indices);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> min_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, bool keepdim, torch::executor::Tensor & min, torch::executor::Tensor & min_indices);
torch::executor::Tensor & min_unary_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & min_unary_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & minimum_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & minimum_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & mm_out(const torch::executor::Tensor & self, const torch::executor::Tensor & mat2, torch::executor::Tensor & out);
torch::executor::Tensor & mm_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & mat2, torch::executor::Tensor & out);
torch::executor::Tensor & mul_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & mul_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & mul_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & mul_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & narrow_copy_out(const torch::executor::Tensor & self, int64_t dim, int64_t start, int64_t length, torch::executor::Tensor & out);
torch::executor::Tensor & narrow_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, int64_t start, int64_t length, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> native_group_norm_out(const torch::executor::Tensor & input, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps, torch::executor::Tensor & out0, torch::executor::Tensor & out1, torch::executor::Tensor & out2);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> native_group_norm_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps, torch::executor::Tensor & out0, torch::executor::Tensor & out1, torch::executor::Tensor & out2);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> native_layer_norm_out(const torch::executor::Tensor & input, torch::executor::ArrayRef<int64_t> normalized_shape, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, double eps, torch::executor::Tensor & out0, torch::executor::Tensor & out1, torch::executor::Tensor & out2);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &,torch::executor::Tensor &> native_layer_norm_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, torch::executor::ArrayRef<int64_t> normalized_shape, const torch::executor::optional<torch::executor::Tensor> & weight, const torch::executor::optional<torch::executor::Tensor> & bias, double eps, torch::executor::Tensor & out0, torch::executor::Tensor & out1, torch::executor::Tensor & out2);
torch::executor::Tensor & ne_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & ne_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & ne_tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & ne_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & neg_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & neg_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & nonzero_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & nonzero_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & ones_out(torch::executor::ArrayRef<int64_t> size, torch::executor::Tensor & out);
torch::executor::Tensor & ones_out(torch::executor::KernelRuntimeContext & context, torch::executor::ArrayRef<int64_t> size, torch::executor::Tensor & out);
torch::executor::Tensor & permute_copy_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dims, torch::executor::Tensor & out);
torch::executor::Tensor & permute_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dims, torch::executor::Tensor & out);
torch::executor::Tensor & pixel_shuffle_out(const torch::executor::Tensor & self, int64_t upscale_factor, torch::executor::Tensor & out);
torch::executor::Tensor & pixel_shuffle_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t upscale_factor, torch::executor::Tensor & out);
torch::executor::Tensor & pixel_unshuffle_out(const torch::executor::Tensor & self, int64_t downscale_factor, torch::executor::Tensor & out);
torch::executor::Tensor & pixel_unshuffle_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t downscale_factor, torch::executor::Tensor & out);
torch::executor::Tensor & pow_Scalar_out(const torch::executor::Scalar & self, const torch::executor::Tensor & exponent, torch::executor::Tensor & out);
torch::executor::Tensor & pow_Scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Scalar & self, const torch::executor::Tensor & exponent, torch::executor::Tensor & out);
torch::executor::Tensor & pow_Tensor_Scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & exponent, torch::executor::Tensor & out);
torch::executor::Tensor & pow_Tensor_Scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & exponent, torch::executor::Tensor & out);
torch::executor::Tensor & pow_Tensor_Tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & exponent, torch::executor::Tensor & out);
torch::executor::Tensor & pow_Tensor_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & exponent, torch::executor::Tensor & out);
torch::executor::Tensor & prod_int_out(const torch::executor::Tensor & self, int64_t dim, bool keepdim, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & prod_int_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, bool keepdim, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & prod_out(const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & prod_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & reciprocal_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & reciprocal_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & relu_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & relu_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & remainder_Tensor_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & remainder_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & remainder_Scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & remainder_Scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, torch::executor::Tensor & out);
torch::executor::Tensor & repeat_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> repeats, torch::executor::Tensor & out);
torch::executor::Tensor & repeat_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> repeats, torch::executor::Tensor & out);
torch::executor::Tensor & repeat_interleave_Tensor_out(const torch::executor::Tensor & repeats, torch::executor::optional<int64_t> output_size, torch::executor::Tensor & out);
torch::executor::Tensor & repeat_interleave_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & repeats, torch::executor::optional<int64_t> output_size, torch::executor::Tensor & out);
torch::executor::Tensor & reflection_pad1d_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & reflection_pad1d_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & reflection_pad2d_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & reflection_pad2d_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & reflection_pad3d_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & reflection_pad3d_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & replication_pad1d_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & replication_pad1d_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & replication_pad2d_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & replication_pad2d_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & replication_pad3d_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & replication_pad3d_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> padding, torch::executor::Tensor & out);
torch::executor::Tensor & roll_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> shifts, torch::executor::ArrayRef<int64_t> dims, torch::executor::Tensor & out);
torch::executor::Tensor & roll_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> shifts, torch::executor::ArrayRef<int64_t> dims, torch::executor::Tensor & out);
torch::executor::Tensor & round_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & round_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & rsqrt_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & rsqrt_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & rsub_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & rsub_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & scalar_tensor_out(const torch::executor::Scalar & s, torch::executor::Tensor & out);
torch::executor::Tensor & scalar_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Scalar & s, torch::executor::Tensor & out);
torch::executor::Tensor & scatter_src_out(const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, const torch::executor::Tensor & src, torch::executor::Tensor & out);
torch::executor::Tensor & scatter_src_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, const torch::executor::Tensor & src, torch::executor::Tensor & out);
torch::executor::Tensor & scatter_value_out(const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, const torch::executor::Scalar & value, torch::executor::Tensor & out);
torch::executor::Tensor & scatter_value_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, const torch::executor::Scalar & value, torch::executor::Tensor & out);
torch::executor::Tensor & scatter_add_out(const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, const torch::executor::Tensor & src, torch::executor::Tensor & out);
torch::executor::Tensor & scatter_add_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, const torch::executor::Tensor & index, const torch::executor::Tensor & src, torch::executor::Tensor & out);
torch::executor::Tensor & select_copy_int_out(const torch::executor::Tensor & self, int64_t dim, int64_t index, torch::executor::Tensor & out);
torch::executor::Tensor & select_copy_int_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, int64_t index, torch::executor::Tensor & out);
torch::executor::Tensor & select_scatter_out(const torch::executor::Tensor & self, const torch::executor::Tensor & src, int64_t dim, int64_t index, torch::executor::Tensor & out);
torch::executor::Tensor & select_scatter_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & src, int64_t dim, int64_t index, torch::executor::Tensor & out);
torch::executor::Tensor & sigmoid_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & sigmoid_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & sign_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & sign_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & sin_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & sin_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & sinh_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & sinh_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & slice_copy_Tensor_out(const torch::executor::Tensor & self, int64_t dim, torch::executor::optional<int64_t> start, torch::executor::optional<int64_t> end, int64_t step, torch::executor::Tensor & out);
torch::executor::Tensor & slice_copy_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, torch::executor::optional<int64_t> start, torch::executor::optional<int64_t> end, int64_t step, torch::executor::Tensor & out);
torch::executor::Tensor & slice_scatter_out(const torch::executor::Tensor & self, const torch::executor::Tensor & src, int64_t dim, torch::executor::optional<int64_t> start, torch::executor::optional<int64_t> end, int64_t step, torch::executor::Tensor & out);
torch::executor::Tensor & slice_scatter_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & src, int64_t dim, torch::executor::optional<int64_t> start, torch::executor::optional<int64_t> end, int64_t step, torch::executor::Tensor & out);
void split_copy_Tensor_out(const torch::executor::Tensor & self, int64_t split_size, int64_t dim, torch::executor::TensorList out);
void split_copy_Tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t split_size, int64_t dim, torch::executor::TensorList out);
void split_with_sizes_copy_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> split_sizes, int64_t dim, torch::executor::TensorList out);
void split_with_sizes_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> split_sizes, int64_t dim, torch::executor::TensorList out);
torch::executor::Tensor & sqrt_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & sqrt_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & squeeze_copy_dim_out(const torch::executor::Tensor & self, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & squeeze_copy_dim_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & squeeze_copy_dims_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dim, torch::executor::Tensor & out);
torch::executor::Tensor & squeeze_copy_dims_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> dim, torch::executor::Tensor & out);
torch::executor::Tensor & stack_out(torch::executor::TensorList tensors, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & stack_out(torch::executor::KernelRuntimeContext & context, torch::executor::TensorList tensors, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & sub_out(const torch::executor::Tensor & self, const torch::executor::Tensor & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & sub_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Tensor & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & sub_scalar_out(const torch::executor::Tensor & self, const torch::executor::Scalar & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & sub_scalar_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, const torch::executor::Scalar & other, const torch::executor::Scalar & alpha, torch::executor::Tensor & out);
torch::executor::Tensor & sum_dim_out(const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, bool keepdim, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & sum_dim_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, bool keepdim, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & t_copy_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & t_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & tan_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & tan_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & tanh_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & tanh_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> topk_values(const torch::executor::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, torch::executor::Tensor & values, torch::executor::Tensor & indices);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> topk_values(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, torch::executor::Tensor & values, torch::executor::Tensor & indices);
torch::executor::Tensor & transpose_copy_int_out(const torch::executor::Tensor & self, int64_t dim0, int64_t dim1, torch::executor::Tensor & out);
torch::executor::Tensor & transpose_copy_int_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim0, int64_t dim1, torch::executor::Tensor & out);
torch::executor::Tensor & tril_out(const torch::executor::Tensor & self, int64_t diagonal, torch::executor::Tensor & out);
torch::executor::Tensor & tril_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t diagonal, torch::executor::Tensor & out);
torch::executor::Tensor & trunc_out(const torch::executor::Tensor & self, torch::executor::Tensor & out);
torch::executor::Tensor & trunc_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::Tensor & out);
void unbind_copy_int_out(const torch::executor::Tensor & self, int64_t dim, torch::executor::TensorList out);
void unbind_copy_int_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, torch::executor::TensorList out);
torch::executor::Tensor & unsqueeze_copy_out(const torch::executor::Tensor & self, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & unsqueeze_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, int64_t dim, torch::executor::Tensor & out);
torch::executor::Tensor & var_correction_out(const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, const torch::executor::optional<torch::executor::Scalar> & correction, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & var_correction_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, const torch::executor::optional<torch::executor::Scalar> & correction, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & var_out(const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, bool unbiased, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & var_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim, bool unbiased, bool keepdim, torch::executor::Tensor & out);
torch::executor::Tensor & view_copy_out(const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> size, torch::executor::Tensor & out);
torch::executor::Tensor & view_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, torch::executor::ArrayRef<int64_t> size, torch::executor::Tensor & out);
torch::executor::Tensor & where_out(const torch::executor::Tensor & condition, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & where_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & condition, const torch::executor::Tensor & self, const torch::executor::Tensor & other, torch::executor::Tensor & out);
torch::executor::Tensor & zeros_out(torch::executor::ArrayRef<int64_t> size, torch::executor::Tensor & out);
torch::executor::Tensor & zeros_out(torch::executor::KernelRuntimeContext & context, torch::executor::ArrayRef<int64_t> size, torch::executor::Tensor & out);
torch::executor::Tensor & _empty_dim_order_out(torch::executor::ArrayRef<int64_t> size, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim_order, torch::executor::Tensor & out);
torch::executor::Tensor & _empty_dim_order_out(torch::executor::KernelRuntimeContext & context, torch::executor::ArrayRef<int64_t> size, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim_order, torch::executor::Tensor & out);
torch::executor::Tensor & _to_dim_order_copy_out(const torch::executor::Tensor & self, bool non_blocking, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim_order, torch::executor::Tensor & out);
torch::executor::Tensor & _to_dim_order_copy_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & self, bool non_blocking, torch::executor::optional<torch::executor::ArrayRef<int64_t>> dim_order, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_add_out(const torch::executor::Tensor & a, double a_scale, int64_t a_zero_point, int64_t a_quant_min, int64_t a_quant_max, const torch::executor::Tensor & b, double b_scale, int64_t b_zero_point, int64_t b_quant_min, int64_t b_quant_max, double out_scale, int64_t out_zero_point, int64_t out_quant_min, int64_t out_quant_max, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_add_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & a, double a_scale, int64_t a_zero_point, int64_t a_quant_min, int64_t a_quant_max, const torch::executor::Tensor & b, double b_scale, int64_t b_zero_point, int64_t b_quant_min, int64_t b_quant_max, double out_scale, int64_t out_zero_point, int64_t out_quant_min, int64_t out_quant_max, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> choose_qparams_tensor_out(const torch::executor::Tensor & input, int64_t quant_min, int64_t quant_max, double eps, torch::executor::ScalarType dtype, torch::executor::Tensor & scale_out, torch::executor::Tensor & zero_point_out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> choose_qparams_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, int64_t quant_min, int64_t quant_max, double eps, torch::executor::ScalarType dtype, torch::executor::Tensor & scale_out, torch::executor::Tensor & zero_point_out);
torch::executor::Tensor & dequantize_per_tensor_out(const torch::executor::Tensor & input, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::optional<torch::executor::ScalarType> out_dtype, torch::executor::Tensor & out);
torch::executor::Tensor & dequantize_per_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::optional<torch::executor::ScalarType> out_dtype, torch::executor::Tensor & out);
torch::executor::Tensor & dequantize_per_tensor_tensor_args_out(const torch::executor::Tensor & input, const torch::executor::Tensor & scale, const torch::executor::Tensor & zero_point, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::optional<torch::executor::ScalarType> out_dtype, torch::executor::Tensor & out);
torch::executor::Tensor & dequantize_per_tensor_tensor_args_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & scale, const torch::executor::Tensor & zero_point, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::optional<torch::executor::ScalarType> out_dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantize_per_channel_out(const torch::executor::Tensor & input, const torch::executor::Tensor & scales, const torch::executor::Tensor & zero_points, int64_t axis, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantize_per_channel_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & scales, const torch::executor::Tensor & zero_points, int64_t axis, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::Tensor & out);
torch::executor::Tensor & dequantize_per_channel_out(const torch::executor::Tensor & input, const torch::executor::Tensor & scales, const torch::executor::optional<torch::executor::Tensor> & zero_points, int64_t axis, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::optional<torch::executor::ScalarType> out_dtype, torch::executor::Tensor & out);
torch::executor::Tensor & dequantize_per_channel_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & scales, const torch::executor::optional<torch::executor::Tensor> & zero_points, int64_t axis, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::optional<torch::executor::ScalarType> out_dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_byte_out(const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_byte_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_byte_dtype_out(const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_byte_dtype_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_2bit_out(const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_2bit_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_2bit_dtype_out(const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_2bit_dtype_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_4bit_out(const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_4bit_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_4bit_dtype_out(const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_embedding_4bit_dtype_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, int64_t weight_quant_min, int64_t weight_quant_max, const torch::executor::Tensor & indices, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_mixed_mm_out(const torch::executor::Tensor & input, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_mixed_mm_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_mixed_linear_out(const torch::executor::Tensor & input, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantized_mixed_linear_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & weight, const torch::executor::Tensor & weight_scales, const torch::executor::optional<torch::executor::Tensor> & weight_zero_points, torch::executor::optional<torch::executor::ScalarType> dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantize_per_tensor_out(const torch::executor::Tensor & input, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantize_per_tensor_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantize_per_tensor_tensor_args_out(const torch::executor::Tensor & input, const torch::executor::Tensor & scale, const torch::executor::Tensor & zero_point, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantize_per_tensor_tensor_args_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & scale, const torch::executor::Tensor & zero_point, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::Tensor & out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> choose_qparams_per_token_asymmetric_out(const torch::executor::Tensor & input, torch::executor::ScalarType dtype, torch::executor::Tensor & scale_out, torch::executor::Tensor & zero_point_out);
::std::tuple<torch::executor::Tensor &,torch::executor::Tensor &> choose_qparams_per_token_asymmetric_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, torch::executor::ScalarType dtype, torch::executor::Tensor & scale_out, torch::executor::Tensor & zero_point_out);
torch::executor::Tensor & quantize_per_token_out(const torch::executor::Tensor & input, const torch::executor::Tensor & scales, const torch::executor::Tensor & zero_points, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::Tensor & out);
torch::executor::Tensor & quantize_per_token_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & scales, const torch::executor::Tensor & zero_points, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::Tensor & out);
torch::executor::Tensor & dequantize_per_token_out(const torch::executor::Tensor & input, const torch::executor::Tensor & scales, const torch::executor::Tensor & zero_points, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::ScalarType output_dtype, torch::executor::Tensor & out);
torch::executor::Tensor & dequantize_per_token_out(torch::executor::KernelRuntimeContext & context, const torch::executor::Tensor & input, const torch::executor::Tensor & scales, const torch::executor::Tensor & zero_points, int64_t quant_min, int64_t quant_max, torch::executor::ScalarType dtype, torch::executor::ScalarType output_dtype, torch::executor::Tensor & out);
} // namespace native
} // namespace executor
} // namespace torch
